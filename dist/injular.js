(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.injular = factory());
}(this, (function () { 'use strict';

function assign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var to = Object(target);

  for (var index = 1; index < arguments.length; index += 1) {
    // eslint-disable-next-line prefer-rest-params
    var nextSource = arguments[index];
    if (nextSource != null) {
      // eslint-disable-next-line no-restricted-syntax
      for (var nextKey in nextSource) {
        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
          to[nextKey] = nextSource[nextKey];
        }
      }
    }
  }
  return to;
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function kebabCase(name) {
  return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
    return (pos ? '-' : '') + letter.toLowerCase();
  });
}

var DIRECTIVE_SUFFIX = 'Directive';

var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
function identifierForController(controller) {
  if (typeof controller === 'string') {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
  return undefined;
}

function instantiateDirective(name, directiveFactory, $injector) {
  // Code from $compileProvider.directive
  var directive = $injector.invoke(directiveFactory);
  if (typeof directive === 'function') {
    directive = { compile: function compile() {
        return directive;
      } };
  } else if (!directive.compile && directive.link) {
    directive.compile = function () {
      return directive.link;
    };
  }
  directive.priority = directive.priority || 0;
  directive.name = directive.name || name;
  directive.require = directive.require || directive.controller && directive.name;
  directive.restrict = directive.restrict || 'EA';
  directive.$$moduleName = directiveFactory.$$moduleName;
  return directive;
}

function removeReplaceableDirectiveProperties(directive) {
  // eslint-disable-next-line no-restricted-syntax
  for (var key in directive) {
    if (key !== 'index') {
      // eslint-disable-next-line no-param-reassign
      delete directive[key];
    }
  }
}

function injularCompile($compileNode, templateAttrs, childTranscludeFn) {
  var node = $compileNode[0];
  node.$injularTemplate = node.outerHTML;
  // eslint-disable-next-line no-underscore-dangle, max-len
  return this._nonInjularCompile && this._nonInjularCompile($compileNode, templateAttrs, childTranscludeFn);
}

function registerInjularDirective(name, directiveFactory) {
  // eslint-disable-next-line no-underscore-dangle
  return this._nonInjularDirective(name, ['$injector', function ($injector) {
    var directive = instantiateDirective(name, directiveFactory, $injector);
    if (!directive.template && directive.restrict === 'E') {
      // eslint-disable-next-line no-underscore-dangle,
      directive._nonInjularCompile = directive.compile;
      directive.compile = injularCompile;
    }
    return directive;
  }]);
}

function attachToModule(module, injularData) {
  /* eslint-disable no-param-reassign, no-underscore-dangle */
  if (module.$injularAttached) return;
  module.$injularAttached = true;
  module.config(['$compileProvider', function ($compileProvider) {
    if ('_nonInjularDirective' in $compileProvider) return;
    $compileProvider._nonInjularDirective = $compileProvider.directive;
    $compileProvider.directive = registerInjularDirective;
  }]).run(['$injector', function ($injector) {
    injularData.$injector = $injector;
  }]);
  /* eslint-enable no-param-reassign, no-underscore-dangle */
}

/* eslint-disable no-param-reassign, no-underscore-dangle */

function injularDirective(name, directiveFactory) {
  this._injular.injectDirective(name, directiveFactory, this._injularData);
  return this;
}

function injularComponent(name, options) {
  this._injular.injectComponent(name, options, this._injularData);
  return this;
}

function injularModule(name, requires, configFn) {
  var module = this._nonInjularModule(name, requires, configFn);
  this._injularModules.push(module);
  module._injular = this._injular;
  module._injularData = this._injularData;
  module._nonInjularDirective = module.directive;
  module.directive = injularDirective;
  module._nonInjularComponent = module.component;
  module.component = injularComponent;
  return module;
}

function injularUnproxify() {
  delete this._injular;
  delete this._injularData;
  this._injularModules.forEach(function (module) {
    delete module._injular;
    delete module._injularData;
    module.directive = module._nonInjularDirective;
    delete module._nonInjularDirective;
    module.component = module._nonInjularComponent;
    delete module._nonInjularComponent;
  });
  delete this._injularModules;
  delete this.$injularUnproxify;
  this.module = this._nonInjularModule;
  delete this._nonInjularModule;
}

function proxifyAngular(angular, injularData) {
  if ('_injular' in angular) return;
  angular._injular = this;
  angular._injularData = injularData;
  angular._injularModules = [];
  angular.$injularUnproxify = injularUnproxify;
  angular._nonInjularModule = angular.module;
  angular.module = injularModule;
}

function injectDirective(name, directiveFactory, injularData) {
  var $injector = injularData.$injector;

  var directives = $injector.get('' + name + DIRECTIVE_SUFFIX);
  var directive = directives[0];
  var newDirective = instantiateDirective(name, directiveFactory, $injector);
  removeReplaceableDirectiveProperties(directive);
  assign(directive, newDirective);
  var $compile = $injector.get('$compile');
  var $rootElement = $injector.get('$rootElement');
  var kebabName = kebabCase(name);
  var $componentElements = $rootElement.find(kebabName);
  for (var i = 0; i < $componentElements.length; i += 1) {
    var $componentElement = $componentElements.eq(i);
    var scope = $componentElement.scope();
    var isolateScope = $componentElement.isolateScope();
    var componentScope = isolateScope || scope;
    var parentScope = isolateScope ? scope : scope.$parent;
    componentScope.$destroy();
    var componentTemplate = void 0;
    if (directive.template) {
      $componentElement.children().remove();
      componentTemplate = $componentElement[0].outerHTML;
    } else {
      componentTemplate = $componentElement[0].$injularTemplate;
    }
    var $newComponentElement = $compile(componentTemplate)(parentScope);
    $componentElement.replaceWith($newComponentElement);
    parentScope.$digest();
  }
}

function injectComponent(name, options, injularData) {
  // Code from $compileProvider.component
  // eslint-disable-next-line func-names
  var controller = options.controller || function () {};

  function factory($injector) {
    function makeInjectable(fn) {
      if (typeof fn === 'function' || Array.isArray(fn)) {
        // eslint-disable-next-line func-names
        return function (tElement, tAttrs) {
          return $injector.invoke(fn, this, { $element: tElement, $attrs: tAttrs });
        };
      }
      return fn;
    }

    var template = !options.template && !options.templateUrl ? '' : options.template;
    var ddo = {
      controller: controller,
      controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
      template: makeInjectable(template),
      templateUrl: makeInjectable(options.templateUrl),
      transclude: options.transclude,
      scope: {},
      bindToController: options.bindings || {},
      restrict: 'E',
      require: options.require
    };

    // Copy annotations (starting with $) over to the DDO
    // eslint-disable-next-line no-restricted-syntax
    for (var key in options) {
      if (key.charAt(0) === '$') ddo[key] = options[key];
    }

    return ddo;
  }

  // TODO(pete) remove the following `forEach` before we release 1.6.0
  // The component-router@0.2.0 looks for the annotations on the controller constructor
  // Nothing in Angular looks for annotations on the factory function but we can't remove
  // it from 1.5.x yet.

  // Copy any annotation properties (starting with $
  // )over to the factory and controller constructor functions
  // These could be used by libraries such as the new component router
  // eslint-disable-next-line no-restricted-syntax
  for (var key in options) {
    if (key.charAt(0) === '$') {
      var val = options[key];
      factory[key] = val;
      // Don't try to copy over annotations to named controller
      if (typeof controller === 'function') controller[key] = val;
    }
  }

  factory.$inject = ['$injector'];

  return this.injectDirective(name, factory, injularData);
}

var injular = {
  attachToModule: attachToModule,
  injectComponent: injectComponent,
  injectDirective: injectDirective,
  proxifyAngular: proxifyAngular
};

return injular;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
